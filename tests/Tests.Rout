
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(dglm)
Loading required package: statmod
> 
> n <- 1000
> 
> TestFunc <- function(mean.formula, var.formula, model.df) {
+   
+   my.glm <- glm(formula = mean.formula,
+                 data = model.df)
+   
+   x <- predict(my.glm, se.fit = TRUE)
+   
+   my.dglm <- dglm(formula = mean.formula,
+                   dformula = var.formula,
+                   data = model.df)
+   
+   y <- predict(my.dglm, se.fit = TRUE)
+   
+   z <- predict(my.dglm$dispersion.fit, se.fit = TRUE)
+   
+   return(list(glm = x, dglm.mean = y, dglm.var = z))
+ }
> 
> 
> a <- runif(n)
> b <- runif(n)
> c <- runif(n)
> d <- runif(n)
> 
> betas <- c(runif(n = 3, min = -10, max = 10), runif(n = 3, min = -1, max = 1))
> 
> mu <- betas[1] + a*betas[2] + b*betas[3]
> var <- exp(betas[4] + c*betas[5] + d*betas[6])
> y <- mu + rnorm(n = n, sd = sd(var))
> 
> my.df <- data.frame(y, a, b, c, d)
> 
> mean.formula <- as.formula('y ~ a + b')
> var.formula <- as.formula('~ c + d')
> 
> l <- TestFunc(mean.formula = mean.formula, var.formula = var.formula, model.df = my.df)
> 
> par(mfrow = c(2, 2))
> plot(mu, l$dglm.mean$fit); abline(0, 1)
> legend(x = 'topleft', legend = paste(c('mu:', 'a', 'b'), round(betas[1:3], 1)), bty = 'n')
> plot(var, exp(l$dglm.var$fit/l$dglm.var$residual.scale)); abline(0, 1)
> legend(x = 'topleft', legend = paste(c('mu:', 'c:', 'd:'), round(betas[4:6], 2)))
> 
> my.dglm <- dglm(formula = mean.formula, dformula = var.formula, data = my.df, method = 'reml')
> 
> plot(mu, predict(my.dglm))
> plot(sqrt(var), predict(my.dglm$dispersion.fit))
> 
> 
> anova(my.dglm)
Analysis of Deviance Table

gaussian double generalized linear model

Response: y

                 DF Seq.Chisq   Seq.P Adj.Chisq   Adj.P
Mean model        2    5058.8 0.00000    5060.4 0.00000
Dispersion model  2       2.6 0.27901       2.6 0.27901
> 
> 
> proc.time()
   user  system elapsed 
   0.20    0.07    0.28 
